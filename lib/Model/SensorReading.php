<?php
/**
 * SensorReading
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * TrackingAPI
 *
 * API for retrieving tracking data and changing settings on LightBug & RemoteThings tracking devices
 *
 * OpenAPI spec version: 1.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.10
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SensorReading Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SensorReading implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'sensorReading';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'timestamp' => '\DateTime',
        'created' => '\DateTime',
        'type' => 'string',
        'value' => 'object',
        'meta' => 'object',
        'related_id' => 'float',
        'id' => 'float',
        'gateway_id' => 'float',
        'device_id' => 'float',
        'sensor_device_id' => 'string',
        'datapoint_id' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'timestamp' => 'date-time',
        'created' => 'date-time',
        'type' => null,
        'value' => null,
        'meta' => null,
        'related_id' => '',
        'id' => '',
        'gateway_id' => '',
        'device_id' => '',
        'sensor_device_id' => null,
        'datapoint_id' => ''
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'timestamp' => 'timestamp',
        'created' => 'created',
        'type' => 'type',
        'value' => 'value',
        'meta' => 'meta',
        'related_id' => 'relatedId',
        'id' => 'id',
        'gateway_id' => 'gatewayId',
        'device_id' => 'deviceId',
        'sensor_device_id' => 'sensorDeviceId',
        'datapoint_id' => 'datapointId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'timestamp' => 'setTimestamp',
        'created' => 'setCreated',
        'type' => 'setType',
        'value' => 'setValue',
        'meta' => 'setMeta',
        'related_id' => 'setRelatedId',
        'id' => 'setId',
        'gateway_id' => 'setGatewayId',
        'device_id' => 'setDeviceId',
        'sensor_device_id' => 'setSensorDeviceId',
        'datapoint_id' => 'setDatapointId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'timestamp' => 'getTimestamp',
        'created' => 'getCreated',
        'type' => 'getType',
        'value' => 'getValue',
        'meta' => 'getMeta',
        'related_id' => 'getRelatedId',
        'id' => 'getId',
        'gateway_id' => 'getGatewayId',
        'device_id' => 'getDeviceId',
        'sensor_device_id' => 'getSensorDeviceId',
        'datapoint_id' => 'getDatapointId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['timestamp'] = isset($data['timestamp']) ? $data['timestamp'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['value'] = isset($data['value']) ? $data['value'] : null;
        $this->container['meta'] = isset($data['meta']) ? $data['meta'] : null;
        $this->container['related_id'] = isset($data['related_id']) ? $data['related_id'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['gateway_id'] = isset($data['gateway_id']) ? $data['gateway_id'] : null;
        $this->container['device_id'] = isset($data['device_id']) ? $data['device_id'] : null;
        $this->container['sensor_device_id'] = isset($data['sensor_device_id']) ? $data['sensor_device_id'] : null;
        $this->container['datapoint_id'] = isset($data['datapoint_id']) ? $data['datapoint_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['timestamp'] === null) {
            $invalidProperties[] = "'timestamp' can't be null";
        }
        if ($this->container['created'] === null) {
            $invalidProperties[] = "'created' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['value'] === null) {
            $invalidProperties[] = "'value' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets timestamp
     *
     * @return \DateTime
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param \DateTime $timestamp Timestamp for the reading
     *
     * @return $this
     */
    public function setTimestamp($timestamp)
    {
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created Timestamp for the writing to db
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Sensor type: 'ultra' (fill level), 'temp' (temperature), ...
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets value
     *
     * @return object
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param object $value JSON value
     *
     * @return $this
     */
    public function setValue($value)
    {
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets meta
     *
     * @return object
     */
    public function getMeta()
    {
        return $this->container['meta'];
    }

    /**
     * Sets meta
     *
     * @param object $meta JSON metadata
     *
     * @return $this
     */
    public function setMeta($meta)
    {
        $this->container['meta'] = $meta;

        return $this;
    }

    /**
     * Gets related_id
     *
     * @return float
     */
    public function getRelatedId()
    {
        return $this->container['related_id'];
    }

    /**
     * Sets related_id
     *
     * @param float $related_id LoraId of another (ie for signal strength)
     *
     * @return $this
     */
    public function setRelatedId($related_id)
    {
        $this->container['related_id'] = $related_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return float
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param float $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets gateway_id
     *
     * @return float
     */
    public function getGatewayId()
    {
        return $this->container['gateway_id'];
    }

    /**
     * Sets gateway_id
     *
     * @param float $gateway_id gateway_id
     *
     * @return $this
     */
    public function setGatewayId($gateway_id)
    {
        $this->container['gateway_id'] = $gateway_id;

        return $this;
    }

    /**
     * Gets device_id
     *
     * @return float
     */
    public function getDeviceId()
    {
        return $this->container['device_id'];
    }

    /**
     * Sets device_id
     *
     * @param float $device_id device_id
     *
     * @return $this
     */
    public function setDeviceId($device_id)
    {
        $this->container['device_id'] = $device_id;

        return $this;
    }

    /**
     * Gets sensor_device_id
     *
     * @return string
     */
    public function getSensorDeviceId()
    {
        return $this->container['sensor_device_id'];
    }

    /**
     * Sets sensor_device_id
     *
     * @param string $sensor_device_id sensor_device_id
     *
     * @return $this
     */
    public function setSensorDeviceId($sensor_device_id)
    {
        $this->container['sensor_device_id'] = $sensor_device_id;

        return $this;
    }

    /**
     * Gets datapoint_id
     *
     * @return float
     */
    public function getDatapointId()
    {
        return $this->container['datapoint_id'];
    }

    /**
     * Sets datapoint_id
     *
     * @param float $datapoint_id datapoint_id
     *
     * @return $this
     */
    public function setDatapointId($datapoint_id)
    {
        $this->container['datapoint_id'] = $datapoint_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


