<?php
/**
 * Datapoint
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * TrackingAPI
 *
 * API for retrieving tracking data and changing settings on LightBug & RemoteThings tracking devices
 *
 * OpenAPI spec version: 1.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.10
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Datapoint Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Datapoint implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'datapoint';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'location' => '\Swagger\Client\Model\GeoPoint',
        'timestamp' => '\DateTime',
        'speed' => 'float',
        'altitude' => 'float',
        'course' => 'float',
        'num_value' => 'string',
        'string_value' => 'string',
        'send_reason' => 'float',
        'sats' => 'float',
        'hdop' => 'float',
        'accuracy' => 'float',
        'location_type' => 'string',
        'battery_voltage' => 'float',
        'average_charge' => 'float',
        'created' => '\DateTime',
        'address' => 'string',
        'alert_type' => 'float',
        'current_used' => 'float',
        'gsm_signal' => 'float',
        'id' => 'float',
        'device_id' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'location' => null,
        'timestamp' => 'date-time',
        'speed' => '',
        'altitude' => '',
        'course' => '',
        'num_value' => null,
        'string_value' => null,
        'send_reason' => '',
        'sats' => '',
        'hdop' => '',
        'accuracy' => '',
        'location_type' => null,
        'battery_voltage' => '',
        'average_charge' => '',
        'created' => 'date-time',
        'address' => null,
        'alert_type' => '',
        'current_used' => '',
        'gsm_signal' => '',
        'id' => '',
        'device_id' => ''
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'location' => 'location',
        'timestamp' => 'timestamp',
        'speed' => 'speed',
        'altitude' => 'altitude',
        'course' => 'course',
        'num_value' => 'num_value',
        'string_value' => 'stringValue',
        'send_reason' => 'sendReason',
        'sats' => 'sats',
        'hdop' => 'hdop',
        'accuracy' => 'accuracy',
        'location_type' => 'locationType',
        'battery_voltage' => 'batteryVoltage',
        'average_charge' => 'averageCharge',
        'created' => 'created',
        'address' => 'address',
        'alert_type' => 'alertType',
        'current_used' => 'currentUsed',
        'gsm_signal' => 'gsmSignal',
        'id' => 'id',
        'device_id' => 'deviceId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'location' => 'setLocation',
        'timestamp' => 'setTimestamp',
        'speed' => 'setSpeed',
        'altitude' => 'setAltitude',
        'course' => 'setCourse',
        'num_value' => 'setNumValue',
        'string_value' => 'setStringValue',
        'send_reason' => 'setSendReason',
        'sats' => 'setSats',
        'hdop' => 'setHdop',
        'accuracy' => 'setAccuracy',
        'location_type' => 'setLocationType',
        'battery_voltage' => 'setBatteryVoltage',
        'average_charge' => 'setAverageCharge',
        'created' => 'setCreated',
        'address' => 'setAddress',
        'alert_type' => 'setAlertType',
        'current_used' => 'setCurrentUsed',
        'gsm_signal' => 'setGsmSignal',
        'id' => 'setId',
        'device_id' => 'setDeviceId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'location' => 'getLocation',
        'timestamp' => 'getTimestamp',
        'speed' => 'getSpeed',
        'altitude' => 'getAltitude',
        'course' => 'getCourse',
        'num_value' => 'getNumValue',
        'string_value' => 'getStringValue',
        'send_reason' => 'getSendReason',
        'sats' => 'getSats',
        'hdop' => 'getHdop',
        'accuracy' => 'getAccuracy',
        'location_type' => 'getLocationType',
        'battery_voltage' => 'getBatteryVoltage',
        'average_charge' => 'getAverageCharge',
        'created' => 'getCreated',
        'address' => 'getAddress',
        'alert_type' => 'getAlertType',
        'current_used' => 'getCurrentUsed',
        'gsm_signal' => 'getGsmSignal',
        'id' => 'getId',
        'device_id' => 'getDeviceId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['timestamp'] = isset($data['timestamp']) ? $data['timestamp'] : null;
        $this->container['speed'] = isset($data['speed']) ? $data['speed'] : null;
        $this->container['altitude'] = isset($data['altitude']) ? $data['altitude'] : null;
        $this->container['course'] = isset($data['course']) ? $data['course'] : null;
        $this->container['num_value'] = isset($data['num_value']) ? $data['num_value'] : null;
        $this->container['string_value'] = isset($data['string_value']) ? $data['string_value'] : null;
        $this->container['send_reason'] = isset($data['send_reason']) ? $data['send_reason'] : null;
        $this->container['sats'] = isset($data['sats']) ? $data['sats'] : null;
        $this->container['hdop'] = isset($data['hdop']) ? $data['hdop'] : null;
        $this->container['accuracy'] = isset($data['accuracy']) ? $data['accuracy'] : null;
        $this->container['location_type'] = isset($data['location_type']) ? $data['location_type'] : 'gps';
        $this->container['battery_voltage'] = isset($data['battery_voltage']) ? $data['battery_voltage'] : null;
        $this->container['average_charge'] = isset($data['average_charge']) ? $data['average_charge'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['alert_type'] = isset($data['alert_type']) ? $data['alert_type'] : null;
        $this->container['current_used'] = isset($data['current_used']) ? $data['current_used'] : null;
        $this->container['gsm_signal'] = isset($data['gsm_signal']) ? $data['gsm_signal'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['device_id'] = isset($data['device_id']) ? $data['device_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['timestamp'] === null) {
            $invalidProperties[] = "'timestamp' can't be null";
        }
        if ($this->container['location_type'] === null) {
            $invalidProperties[] = "'location_type' can't be null";
        }
        if ($this->container['created'] === null) {
            $invalidProperties[] = "'created' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets location
     *
     * @return \Swagger\Client\Model\GeoPoint
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param \Swagger\Client\Model\GeoPoint $location location
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return \DateTime
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param \DateTime $timestamp Timestamp for the datapoint. NB this is not necessarily the same as 'created'
     *
     * @return $this
     */
    public function setTimestamp($timestamp)
    {
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets speed
     *
     * @return float
     */
    public function getSpeed()
    {
        return $this->container['speed'];
    }

    /**
     * Sets speed
     *
     * @param float $speed Ground velocity in kmh, as determined by the GPS
     *
     * @return $this
     */
    public function setSpeed($speed)
    {
        $this->container['speed'] = $speed;

        return $this;
    }

    /**
     * Gets altitude
     *
     * @return float
     */
    public function getAltitude()
    {
        return $this->container['altitude'];
    }

    /**
     * Sets altitude
     *
     * @param float $altitude Altitude in m, as determined by the GPS
     *
     * @return $this
     */
    public function setAltitude($altitude)
    {
        $this->container['altitude'] = $altitude;

        return $this;
    }

    /**
     * Gets course
     *
     * @return float
     */
    public function getCourse()
    {
        return $this->container['course'];
    }

    /**
     * Sets course
     *
     * @param float $course Course in degrees, as determined by the GPS
     *
     * @return $this
     */
    public function setCourse($course)
    {
        $this->container['course'] = $course;

        return $this;
    }

    /**
     * Gets num_value
     *
     * @return string
     */
    public function getNumValue()
    {
        return $this->container['num_value'];
    }

    /**
     * Sets num_value
     *
     * @param string $num_value Internal use only
     *
     * @return $this
     */
    public function setNumValue($num_value)
    {
        $this->container['num_value'] = $num_value;

        return $this;
    }

    /**
     * Gets string_value
     *
     * @return string
     */
    public function getStringValue()
    {
        return $this->container['string_value'];
    }

    /**
     * Sets string_value
     *
     * @param string $string_value Internal use only
     *
     * @return $this
     */
    public function setStringValue($string_value)
    {
        $this->container['string_value'] = $string_value;

        return $this;
    }

    /**
     * Gets send_reason
     *
     * @return float
     */
    public function getSendReason()
    {
        return $this->container['send_reason'];
    }

    /**
     * Sets send_reason
     *
     * @param float $send_reason Bitfield indicating reason for datapoint transmission and status of the device at the time.   Bit1(1): Wake mode active,    Bit2(2): Sleep mode active,    Bit3(4): Bluetooth disconnected,    Bit4(8): Outside of Safe-zone,    Bit5(16): Motion detected,    Bit6(32): Device started moving,    Bit7(64): Device stopped moving,    Bit8(128): Position is stale: last known location was used   Special case 255/0xFF: device was checking in with server. Ignore all data
     *
     * @return $this
     */
    public function setSendReason($send_reason)
    {
        $this->container['send_reason'] = $send_reason;

        return $this;
    }

    /**
     * Gets sats
     *
     * @return float
     */
    public function getSats()
    {
        return $this->container['sats'];
    }

    /**
     * Sets sats
     *
     * @param float $sats Number of visible satellites, as determined by the GPS
     *
     * @return $this
     */
    public function setSats($sats)
    {
        $this->container['sats'] = $sats;

        return $this;
    }

    /**
     * Gets hdop
     *
     * @return float
     */
    public function getHdop()
    {
        return $this->container['hdop'];
    }

    /**
     * Sets hdop
     *
     * @param float $hdop Deprecated
     *
     * @return $this
     */
    public function setHdop($hdop)
    {
        $this->container['hdop'] = $hdop;

        return $this;
    }

    /**
     * Gets accuracy
     *
     * @return float
     */
    public function getAccuracy()
    {
        return $this->container['accuracy'];
    }

    /**
     * Sets accuracy
     *
     * @param float $accuracy Accuracy of the location in meters
     *
     * @return $this
     */
    public function setAccuracy($accuracy)
    {
        $this->container['accuracy'] = $accuracy;

        return $this;
    }

    /**
     * Gets location_type
     *
     * @return string
     */
    public function getLocationType()
    {
        return $this->container['location_type'];
    }

    /**
     * Sets location_type
     *
     * @param string $location_type Type of position. Can be 'gps', 'wifi', 'gsm' or 'invalid'
     *
     * @return $this
     */
    public function setLocationType($location_type)
    {
        $this->container['location_type'] = $location_type;

        return $this;
    }

    /**
     * Gets battery_voltage
     *
     * @return float
     */
    public function getBatteryVoltage()
    {
        return $this->container['battery_voltage'];
    }

    /**
     * Sets battery_voltage
     *
     * @param float $battery_voltage Battery charge level in volts.
     *
     * @return $this
     */
    public function setBatteryVoltage($battery_voltage)
    {
        $this->container['battery_voltage'] = $battery_voltage;

        return $this;
    }

    /**
     * Gets average_charge
     *
     * @return float
     */
    public function getAverageCharge()
    {
        return $this->container['average_charge'];
    }

    /**
     * Sets average_charge
     *
     * @param float $average_charge Internal Use. 255 indicates plugged in and charging.
     *
     * @return $this
     */
    public function setAverageCharge($average_charge)
    {
        $this->container['average_charge'] = $average_charge;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created Timestamp for when the datapoint was received and processed by the server
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string $address A reverse geocode result for the point
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets alert_type
     *
     * @return float
     */
    public function getAlertType()
    {
        return $this->container['alert_type'];
    }

    /**
     * Sets alert_type
     *
     * @param float $alert_type Bitfield indicating what alerts where active at transmission time   Bit1(1): Freefall / Drop detected,    Bit2(2): Rotation detected,    Bit3(4): GSM jamming detected,    Bit4(8): Button was pressed,    Bit5(16): Generic Alert
     *
     * @return $this
     */
    public function setAlertType($alert_type)
    {
        $this->container['alert_type'] = $alert_type;

        return $this;
    }

    /**
     * Gets current_used
     *
     * @return float
     */
    public function getCurrentUsed()
    {
        return $this->container['current_used'];
    }

    /**
     * Sets current_used
     *
     * @param float $current_used Current Used to send this location in microAmp Hours
     *
     * @return $this
     */
    public function setCurrentUsed($current_used)
    {
        $this->container['current_used'] = $current_used;

        return $this;
    }

    /**
     * Gets gsm_signal
     *
     * @return float
     */
    public function getGsmSignal()
    {
        return $this->container['gsm_signal'];
    }

    /**
     * Sets gsm_signal
     *
     * @param float $gsm_signal GSM CSQ value
     *
     * @return $this
     */
    public function setGsmSignal($gsm_signal)
    {
        $this->container['gsm_signal'] = $gsm_signal;

        return $this;
    }

    /**
     * Gets id
     *
     * @return float
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param float $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets device_id
     *
     * @return float
     */
    public function getDeviceId()
    {
        return $this->container['device_id'];
    }

    /**
     * Sets device_id
     *
     * @param float $device_id device_id
     *
     * @return $this
     */
    public function setDeviceId($device_id)
    {
        $this->container['device_id'] = $device_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


