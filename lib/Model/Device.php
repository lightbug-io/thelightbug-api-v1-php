<?php
/**
 * Device
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * TrackingAPI
 *
 * API for retrieving tracking data and changing settings on LightBug & RemoteThings tracking devices
 *
 * OpenAPI spec version: 1.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Device Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Device implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'device';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'imei' => 'string',
        'iccid' => 'string',
        'imsi' => 'string',
        'bt_mac_address' => 'string',
        'type' => 'string',
        'last_connection' => '\DateTime',
        'first_seen' => '\DateTime',
        'mode' => 'string',
        'name' => 'string',
        'battery_voltage' => 'float',
        'tags' => 'string[]',
        'current_mode' => 'float',
        'color' => 'string',
        'save_to_web' => 'bool',
        'expires' => '\DateTime',
        'active' => 'bool',
        'deep_sleep' => 'bool',
        'simstate' => 'string',
        'id' => 'float',
        'owner_id' => 'float',
        'secure_phone_id' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'imei' => null,
        'iccid' => null,
        'imsi' => null,
        'bt_mac_address' => null,
        'type' => null,
        'last_connection' => 'date-time',
        'first_seen' => 'date-time',
        'mode' => null,
        'name' => null,
        'battery_voltage' => '',
        'tags' => null,
        'current_mode' => '',
        'color' => null,
        'save_to_web' => null,
        'expires' => 'date-time',
        'active' => null,
        'deep_sleep' => null,
        'simstate' => null,
        'id' => '',
        'owner_id' => '',
        'secure_phone_id' => ''
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'imei' => 'imei',
        'iccid' => 'iccid',
        'imsi' => 'imsi',
        'bt_mac_address' => 'btMacAddress',
        'type' => 'type',
        'last_connection' => 'lastConnection',
        'first_seen' => 'firstSeen',
        'mode' => 'mode',
        'name' => 'name',
        'battery_voltage' => 'batteryVoltage',
        'tags' => 'tags',
        'current_mode' => 'currentMode',
        'color' => 'color',
        'save_to_web' => 'saveToWeb',
        'expires' => 'expires',
        'active' => 'active',
        'deep_sleep' => 'deepSleep',
        'simstate' => 'simstate',
        'id' => 'id',
        'owner_id' => 'ownerId',
        'secure_phone_id' => 'securePhoneId'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'imei' => 'setImei',
        'iccid' => 'setIccid',
        'imsi' => 'setImsi',
        'bt_mac_address' => 'setBtMacAddress',
        'type' => 'setType',
        'last_connection' => 'setLastConnection',
        'first_seen' => 'setFirstSeen',
        'mode' => 'setMode',
        'name' => 'setName',
        'battery_voltage' => 'setBatteryVoltage',
        'tags' => 'setTags',
        'current_mode' => 'setCurrentMode',
        'color' => 'setColor',
        'save_to_web' => 'setSaveToWeb',
        'expires' => 'setExpires',
        'active' => 'setActive',
        'deep_sleep' => 'setDeepSleep',
        'simstate' => 'setSimstate',
        'id' => 'setId',
        'owner_id' => 'setOwnerId',
        'secure_phone_id' => 'setSecurePhoneId'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'imei' => 'getImei',
        'iccid' => 'getIccid',
        'imsi' => 'getImsi',
        'bt_mac_address' => 'getBtMacAddress',
        'type' => 'getType',
        'last_connection' => 'getLastConnection',
        'first_seen' => 'getFirstSeen',
        'mode' => 'getMode',
        'name' => 'getName',
        'battery_voltage' => 'getBatteryVoltage',
        'tags' => 'getTags',
        'current_mode' => 'getCurrentMode',
        'color' => 'getColor',
        'save_to_web' => 'getSaveToWeb',
        'expires' => 'getExpires',
        'active' => 'getActive',
        'deep_sleep' => 'getDeepSleep',
        'simstate' => 'getSimstate',
        'id' => 'getId',
        'owner_id' => 'getOwnerId',
        'secure_phone_id' => 'getSecurePhoneId'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['imei'] = isset($data['imei']) ? $data['imei'] : null;
        $this->container['iccid'] = isset($data['iccid']) ? $data['iccid'] : null;
        $this->container['imsi'] = isset($data['imsi']) ? $data['imsi'] : null;
        $this->container['bt_mac_address'] = isset($data['bt_mac_address']) ? $data['bt_mac_address'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['last_connection'] = isset($data['last_connection']) ? $data['last_connection'] : null;
        $this->container['first_seen'] = isset($data['first_seen']) ? $data['first_seen'] : null;
        $this->container['mode'] = isset($data['mode']) ? $data['mode'] : 'default';
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['battery_voltage'] = isset($data['battery_voltage']) ? $data['battery_voltage'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['current_mode'] = isset($data['current_mode']) ? $data['current_mode'] : null;
        $this->container['color'] = isset($data['color']) ? $data['color'] : 'ce0027';
        $this->container['save_to_web'] = isset($data['save_to_web']) ? $data['save_to_web'] : false;
        $this->container['expires'] = isset($data['expires']) ? $data['expires'] : null;
        $this->container['active'] = isset($data['active']) ? $data['active'] : false;
        $this->container['deep_sleep'] = isset($data['deep_sleep']) ? $data['deep_sleep'] : false;
        $this->container['simstate'] = isset($data['simstate']) ? $data['simstate'] : 'active';
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['owner_id'] = isset($data['owner_id']) ? $data['owner_id'] : null;
        $this->container['secure_phone_id'] = isset($data['secure_phone_id']) ? $data['secure_phone_id'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['imei'] === null) {
            $invalid_properties[] = "'imei' can't be null";
        }
        if ((strlen($this->container['imei']) > 15)) {
            $invalid_properties[] = "invalid value for 'imei', the character length must be smaller than or equal to 15.";
        }

        if ($this->container['iccid'] === null) {
            $invalid_properties[] = "'iccid' can't be null";
        }
        if (!is_null($this->container['bt_mac_address']) && (strlen($this->container['bt_mac_address']) > 17)) {
            $invalid_properties[] = "invalid value for 'bt_mac_address', the character length must be smaller than or equal to 17.";
        }

        if ($this->container['first_seen'] === null) {
            $invalid_properties[] = "'first_seen' can't be null";
        }
        if ($this->container['mode'] === null) {
            $invalid_properties[] = "'mode' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['imei'] === null) {
            return false;
        }
        if (strlen($this->container['imei']) > 15) {
            return false;
        }
        if ($this->container['iccid'] === null) {
            return false;
        }
        if (strlen($this->container['bt_mac_address']) > 17) {
            return false;
        }
        if ($this->container['first_seen'] === null) {
            return false;
        }
        if ($this->container['mode'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets imei
     * @return string
     */
    public function getImei()
    {
        return $this->container['imei'];
    }

    /**
     * Sets imei
     * @param string $imei
     * @return $this
     */
    public function setImei($imei)
    {
        if ((strlen($imei) > 15)) {
            throw new \InvalidArgumentException('invalid length for $imei when calling Device., must be smaller than or equal to 15.');
        }

        $this->container['imei'] = $imei;

        return $this;
    }

    /**
     * Gets iccid
     * @return string
     */
    public function getIccid()
    {
        return $this->container['iccid'];
    }

    /**
     * Sets iccid
     * @param string $iccid
     * @return $this
     */
    public function setIccid($iccid)
    {
        $this->container['iccid'] = $iccid;

        return $this;
    }

    /**
     * Gets imsi
     * @return string
     */
    public function getImsi()
    {
        return $this->container['imsi'];
    }

    /**
     * Sets imsi
     * @param string $imsi
     * @return $this
     */
    public function setImsi($imsi)
    {
        $this->container['imsi'] = $imsi;

        return $this;
    }

    /**
     * Gets bt_mac_address
     * @return string
     */
    public function getBtMacAddress()
    {
        return $this->container['bt_mac_address'];
    }

    /**
     * Sets bt_mac_address
     * @param string $bt_mac_address
     * @return $this
     */
    public function setBtMacAddress($bt_mac_address)
    {
        if (!is_null($bt_mac_address) && (strlen($bt_mac_address) > 17)) {
            throw new \InvalidArgumentException('invalid length for $bt_mac_address when calling Device., must be smaller than or equal to 17.');
        }

        $this->container['bt_mac_address'] = $bt_mac_address;

        return $this;
    }

    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param string $type
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets last_connection
     * @return \DateTime
     */
    public function getLastConnection()
    {
        return $this->container['last_connection'];
    }

    /**
     * Sets last_connection
     * @param \DateTime $last_connection
     * @return $this
     */
    public function setLastConnection($last_connection)
    {
        $this->container['last_connection'] = $last_connection;

        return $this;
    }

    /**
     * Gets first_seen
     * @return \DateTime
     */
    public function getFirstSeen()
    {
        return $this->container['first_seen'];
    }

    /**
     * Sets first_seen
     * @param \DateTime $first_seen
     * @return $this
     */
    public function setFirstSeen($first_seen)
    {
        $this->container['first_seen'] = $first_seen;

        return $this;
    }

    /**
     * Gets mode
     * @return string
     */
    public function getMode()
    {
        return $this->container['mode'];
    }

    /**
     * Sets mode
     * @param string $mode
     * @return $this
     */
    public function setMode($mode)
    {
        $this->container['mode'] = $mode;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets battery_voltage
     * @return float
     */
    public function getBatteryVoltage()
    {
        return $this->container['battery_voltage'];
    }

    /**
     * Sets battery_voltage
     * @param float $battery_voltage
     * @return $this
     */
    public function setBatteryVoltage($battery_voltage)
    {
        $this->container['battery_voltage'] = $battery_voltage;

        return $this;
    }

    /**
     * Gets tags
     * @return string[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     * @param string[] $tags
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets current_mode
     * @return float
     */
    public function getCurrentMode()
    {
        return $this->container['current_mode'];
    }

    /**
     * Sets current_mode
     * @param float $current_mode
     * @return $this
     */
    public function setCurrentMode($current_mode)
    {
        $this->container['current_mode'] = $current_mode;

        return $this;
    }

    /**
     * Gets color
     * @return string
     */
    public function getColor()
    {
        return $this->container['color'];
    }

    /**
     * Sets color
     * @param string $color
     * @return $this
     */
    public function setColor($color)
    {
        $this->container['color'] = $color;

        return $this;
    }

    /**
     * Gets save_to_web
     * @return bool
     */
    public function getSaveToWeb()
    {
        return $this->container['save_to_web'];
    }

    /**
     * Sets save_to_web
     * @param bool $save_to_web
     * @return $this
     */
    public function setSaveToWeb($save_to_web)
    {
        $this->container['save_to_web'] = $save_to_web;

        return $this;
    }

    /**
     * Gets expires
     * @return \DateTime
     */
    public function getExpires()
    {
        return $this->container['expires'];
    }

    /**
     * Sets expires
     * @param \DateTime $expires
     * @return $this
     */
    public function setExpires($expires)
    {
        $this->container['expires'] = $expires;

        return $this;
    }

    /**
     * Gets active
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     * @param bool $active
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets deep_sleep
     * @return bool
     */
    public function getDeepSleep()
    {
        return $this->container['deep_sleep'];
    }

    /**
     * Sets deep_sleep
     * @param bool $deep_sleep
     * @return $this
     */
    public function setDeepSleep($deep_sleep)
    {
        $this->container['deep_sleep'] = $deep_sleep;

        return $this;
    }

    /**
     * Gets simstate
     * @return string
     */
    public function getSimstate()
    {
        return $this->container['simstate'];
    }

    /**
     * Sets simstate
     * @param string $simstate
     * @return $this
     */
    public function setSimstate($simstate)
    {
        $this->container['simstate'] = $simstate;

        return $this;
    }

    /**
     * Gets id
     * @return float
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param float $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets owner_id
     * @return float
     */
    public function getOwnerId()
    {
        return $this->container['owner_id'];
    }

    /**
     * Sets owner_id
     * @param float $owner_id
     * @return $this
     */
    public function setOwnerId($owner_id)
    {
        $this->container['owner_id'] = $owner_id;

        return $this;
    }

    /**
     * Gets secure_phone_id
     * @return float
     */
    public function getSecurePhoneId()
    {
        return $this->container['secure_phone_id'];
    }

    /**
     * Sets secure_phone_id
     * @param float $secure_phone_id
     * @return $this
     */
    public function setSecurePhoneId($secure_phone_id)
    {
        $this->container['secure_phone_id'] = $secure_phone_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


