<?php
/**
 * Geofence
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * TrackingAPI
 *
 * API for retrieving tracking data and changing settings on LightBug & RemoteThings tracking devices
 *
 * OpenAPI spec version: 1.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.10
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Geofence Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Geofence implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'geofence';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'outline' => 'object[]',
        'center' => '\Swagger\Client\Model\GeoPoint',
        'radius' => 'float',
        'type' => 'string',
        'name' => 'string',
        'was_inside' => 'bool',
        'last_checked' => '\DateTime',
        'modified' => 'bool',
        'id' => 'float',
        'device_id' => 'float',
        'config_id' => 'float',
        'user_id' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'outline' => null,
        'center' => null,
        'radius' => '',
        'type' => null,
        'name' => null,
        'was_inside' => null,
        'last_checked' => 'date-time',
        'modified' => null,
        'id' => '',
        'device_id' => '',
        'config_id' => '',
        'user_id' => ''
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'outline' => 'outline',
        'center' => 'center',
        'radius' => 'radius',
        'type' => 'type',
        'name' => 'name',
        'was_inside' => 'wasInside',
        'last_checked' => 'lastChecked',
        'modified' => 'modified',
        'id' => 'id',
        'device_id' => 'deviceId',
        'config_id' => 'configId',
        'user_id' => 'userId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'outline' => 'setOutline',
        'center' => 'setCenter',
        'radius' => 'setRadius',
        'type' => 'setType',
        'name' => 'setName',
        'was_inside' => 'setWasInside',
        'last_checked' => 'setLastChecked',
        'modified' => 'setModified',
        'id' => 'setId',
        'device_id' => 'setDeviceId',
        'config_id' => 'setConfigId',
        'user_id' => 'setUserId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'outline' => 'getOutline',
        'center' => 'getCenter',
        'radius' => 'getRadius',
        'type' => 'getType',
        'name' => 'getName',
        'was_inside' => 'getWasInside',
        'last_checked' => 'getLastChecked',
        'modified' => 'getModified',
        'id' => 'getId',
        'device_id' => 'getDeviceId',
        'config_id' => 'getConfigId',
        'user_id' => 'getUserId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['outline'] = isset($data['outline']) ? $data['outline'] : null;
        $this->container['center'] = isset($data['center']) ? $data['center'] : null;
        $this->container['radius'] = isset($data['radius']) ? $data['radius'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['was_inside'] = isset($data['was_inside']) ? $data['was_inside'] : false;
        $this->container['last_checked'] = isset($data['last_checked']) ? $data['last_checked'] : null;
        $this->container['modified'] = isset($data['modified']) ? $data['modified'] : false;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['device_id'] = isset($data['device_id']) ? $data['device_id'] : null;
        $this->container['config_id'] = isset($data['config_id']) ? $data['config_id'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets outline
     *
     * @return object[]
     */
    public function getOutline()
    {
        return $this->container['outline'];
    }

    /**
     * Sets outline
     *
     * @param object[] $outline Array of {lat:x,lng:y} objects representing the vertices of the polygon. Do not use with center and radius.
     *
     * @return $this
     */
    public function setOutline($outline)
    {
        $this->container['outline'] = $outline;

        return $this;
    }

    /**
     * Gets center
     *
     * @return \Swagger\Client\Model\GeoPoint
     */
    public function getCenter()
    {
        return $this->container['center'];
    }

    /**
     * Sets center
     *
     * @param \Swagger\Client\Model\GeoPoint $center For circular geofences, the center. Property is ignored if outline != null.
     *
     * @return $this
     */
    public function setCenter($center)
    {
        $this->container['center'] = $center;

        return $this;
    }

    /**
     * Gets radius
     *
     * @return float
     */
    public function getRadius()
    {
        return $this->container['radius'];
    }

    /**
     * Sets radius
     *
     * @param float $radius For circular geofences, the radius of the circle in meters. Property is ignored if outline != null.
     *
     * @return $this
     */
    public function setRadius($radius)
    {
        $this->container['radius'] = $radius;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Grouping value
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets was_inside
     *
     * @return bool
     */
    public function getWasInside()
    {
        return $this->container['was_inside'];
    }

    /**
     * Sets was_inside
     *
     * @param bool $was_inside If the last point received was inside the geofence. Only updated for notifications (not the safe-zone as that is evaluated on the device)
     *
     * @return $this
     */
    public function setWasInside($was_inside)
    {
        $this->container['was_inside'] = $was_inside;

        return $this;
    }

    /**
     * Gets last_checked
     *
     * @return \DateTime
     */
    public function getLastChecked()
    {
        return $this->container['last_checked'];
    }

    /**
     * Sets last_checked
     *
     * @param \DateTime $last_checked When the geofence was last evaluated. Only updated for notifications (not the safe-zone as that is evaluated on the device)
     *
     * @return $this
     */
    public function setLastChecked($last_checked)
    {
        $this->container['last_checked'] = $last_checked;

        return $this;
    }

    /**
     * Gets modified
     *
     * @return bool
     */
    public function getModified()
    {
        return $this->container['modified'];
    }

    /**
     * Sets modified
     *
     * @param bool $modified modified
     *
     * @return $this
     */
    public function setModified($modified)
    {
        $this->container['modified'] = $modified;

        return $this;
    }

    /**
     * Gets id
     *
     * @return float
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param float $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets device_id
     *
     * @return float
     */
    public function getDeviceId()
    {
        return $this->container['device_id'];
    }

    /**
     * Sets device_id
     *
     * @param float $device_id device_id
     *
     * @return $this
     */
    public function setDeviceId($device_id)
    {
        $this->container['device_id'] = $device_id;

        return $this;
    }

    /**
     * Gets config_id
     *
     * @return float
     */
    public function getConfigId()
    {
        return $this->container['config_id'];
    }

    /**
     * Sets config_id
     *
     * @param float $config_id config_id
     *
     * @return $this
     */
    public function setConfigId($config_id)
    {
        $this->container['config_id'] = $config_id;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return float
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param float $user_id user_id
     *
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


